// XXX: import.
import "dcetypes.idl";

[
    uuid(e1af8308-5d1f-11c9-91a4-08002b14a0fa),
    version(3.0),
    pointer_default(ref)
]
interface epm
{
    const long ept_max_annotation_size = 64;

    typedef struct
    {
                    GUID        object;
                    twr_t      *tower;
        [string]    char        annotation[ept_max_annotation_size];
    } ept_entry_t, *ept_entry_p_t;

    typedef [context_handle] void *ept_lookup_handle_t;

    /* Adds entries to an endpoint map */
    void ept_insert(
        [in]    handle_t            h,
        [in]    unsigned32          num_ents,
        [in, size_is(num_ents)]
                ept_entry_t         entries[],
        [in]    boolean32           replace,
        [out]   error_status_t      *status
    );

    /* Removes entries from an endpoint map */
    void ept_delete(
        [in]    handle_t            h,
        [in]    unsigned32          num_ents,
        [in, size_is(num_ents)]
                ept_entry_t         entries[],
        [out]   error_status_t      *status
    );

    /* Lookup entries in an endpoint map */
    [idempotent]
    void ept_lookup(
        [in]        handle_t            h,
        [in]        unsigned32          inquiry_type,
        [in]        uuid_p_t            object,
        [in]        rpc_if_id_p_t       interface_id,
        [in]        unsigned32          vers_option,
        [in, out]   ept_lookup_handle_t *entry_handle,
        [in]        unsigned32          max_ents,
        [out]       unsigned32          *num_ents,
        [out, length_is(*num_ents), size_is(max_ents)]
                    ept_entry_t         entries[],
        [out]       error_status_t      *status
    );

    /* Lookup entries in an endpoint map using the given input pattern */
    [idempotent]
    void ept_map(
        [in]        handle_t            h,
        [in]        uuid_p_t            object,
        [in]        twr_p_t             map_tower,
        [in, out]   ept_lookup_handle_t *entry_handle,
        [in]        unsigned32          max_towers,
        [out]       unsigned32          *num_towers,
        [out, length_is(*num_towers), size_is(max_towers)]
                    twr_p_t             *towers,
        [out]       error_status_t      *status
    );

    /* Free the context handle returned by ept_lookup or ept_map */
    void ept_lookup_handle_free(
        [in]        handle_t            h,
        [in, out]   ept_lookup_handle_t *entry_handle,
        [out]       error_status_t      *status
    );

    /* Inquires as to the endpoint map's object identifier */
    [idempotent]
    void ept_inq_object(
        [in]        handle_t            h,
        [out]       GUID                *ept_object,
        [out]       error_status_t      *status
    );

    /* Deletes matching entries in the endpoint map */
    void ept_mgmt_delete(
        [in]        handle_t            h,
        [in]        boolean32           object_speced,
        [in]        uuid_p_t            object,
        [in]        twr_p_t             tower,
        [out]       error_status_t      *status
    );
}

