// Code generated by goyacc -v midl/y.out -o midl/parse.go -p RPC midl/parse.y. DO NOT EDIT.

//line midl/parse.y:2
package midl

import __yyfmt__ "fmt"

//line midl/parse.y:2

// parse.go contains the go-yacc definitions for the
// (M)IDL grammar parser.

import (
	"fmt"
	"math/big"

	"github.com/oiweiwei/go-msrpc/midl/uuid"
)

var (
	_ = fmt.Sprintf("")
)

//line midl/parse.y:20
type RPCSymType struct {
	yys                   int
	File                  File
	Interface             Interface
	InterfaceBody         InterfaceBody
	Version               *Version
	Export                []*Export
	Type                  *Type
	Kind                  Kind
	Const                 *Const
	Operation             *Operation
	Operations            []*Operation
	Param                 *Param
	Params                []*Param
	Fields                []*Field
	Field                 *Field
	Declarators           []*pDeclarator
	Declarator            *pDeclarator
	ArrayBound            ArrayBound
	Int64                 int64
	UnionSwitch           *UnionSwitch
	UnionCases            []*UnionCase
	UnionCase             *UnionCase
	Expr                  Expr
	Exprs                 Exprs
	Ident                 string
	Char                  rune
	String                string
	Int                   *big.Int
	UUID                  *uuid.UUID
	Range                 *Range
	Strings               []string
	Token                 int
	Typedef               *pTypedef
	Attr                  pAttr
	AttrType              pAttrType
	TagID                 pTagID
	TagIDs                []pTagID
	ComClass              ComClass
	Library               Library
	ComInterfaces         []*ComInterface
	ComInterface          *ComInterface
	DispatchInterface     DispatchInterface
	DispatchInterfaceBody DispatchInterfaceBody
}

const FLOAT = 57346
const DOUBLE = 57347
const HYPER = 57348
const UNSIGNED = 57349
const SIGNED = 57350
const LONG = 57351
const SHORT = 57352
const SMALL = 57353
const INT = 57354
const CHAR = 57355
const BOOLEAN = 57356
const BYTE = 57357
const VOID = 57358
const HANDLE_T = 57359
const ERROR_STATUS_T = 57360
const ISO_LATIN_1 = 57361
const ISO_MULTILINGUAL = 57362
const ISO_UCS = 57363
const STRUCT = 57364
const FIRST_IS = 57365
const LAST_IS = 57366
const LENGTH_IS = 57367
const MAX_IS = 57368
const MIN_IS = 57369
const SIZE_IS = 57370
const SWITCH_IS = 57371
const USAGE_STRING = 57372
const USAGE_CONTEXT_HANDLE = 57373
const FORMAT = 57374
const FORMAT_NULL_TERMINATED = 57375
const FORMAT_MULTI_SIZE = 57376
const FORMAT_UTF8 = 57377
const FORMAT_RUNE = 57378
const IGNORE = 57379
const POINTER = 57380
const POINTER_REF = 57381
const POINTER_UNIQUE = 57382
const POINTER_PTR = 57383
const CONST = 57384
const NULL = 57385
const TRUE = 57386
const FALSE = 57387
const IN = 57388
const OUT = 57389
const ENUM = 57390
const PIPE = 57391
const UNION = 57392
const SWITCH = 57393
const CASE = 57394
const DEFAULT = 57395
const SWITCH_TYPE = 57396
const TRANSMIT_AS = 57397
const HANDLE = 57398
const IMPORT = 57399
const TYPEDEF = 57400
const UUID = 57401
const INTERFACE = 57402
const IDEMPOTENT = 57403
const BROADCAST = 57404
const MAYBE = 57405
const REFLECT_DELETIONS = 57406
const VERSION = 57407
const ENDPOINT = 57408
const EXCEPTIONS = 57409
const LOCAL = 57410
const POINTER_DEFAULT = 57411
const RETVAL = 57412
const IID_IS = 57413
const WCHAR_T = 57414
const INT3264 = 57415
const INT8 = 57416
const INT16 = 57417
const INT32 = 57418
const INT64 = 57419
const RANGE = 57420
const MS_UNION = 57421
const OBJECT = 57422
const V1_ENUM = 57423
const STRICT_CONTEXT_HANDLE = 57424
const TYPE_STRICT_CONTEXT_HANDLE = 57425
const DISABLE_CONSISTENCY_CHECK = 57426
const SIZEOF = 57427
const PRAGMA_DEFINE = 57428
const PRAGMA_CPP_QUOTE = 57429
const CALLBACK = 57430
const HELP_STRING = 57431
const DUAL = 57432
const PROPGET = 57433
const PROPPUT = 57434
const PROPPUTREF = 57435
const ID = 57436
const HIDDEN = 57437
const NONEXTENSIBLE = 57438
const RESTRICTED = 57439
const DEFAULT_VALUE = 57440
const ODL = 57441
const OLEAUTOMATION = 57442
const OPTIONAL = 57443
const APPOBJECT = 57444
const SAFEARRAY = 57445
const PAD = 57446
const GOEXT_LAYOUT = 57447
const GOEXT_NO_SIZE_LIMIT = 57448
const CALL_AS = 57449
const ANNOTATION = 57450
const WIRE_MARSHAL = 57451
const PUBLIC = 57452
const SOURCE = 57453
const DISPINTERFACE = 57454
const METHODS = 57455
const PROPERTIES = 57456
const COCLASS = 57457
const LIBRARY = 57458
const ACS_BYTE_COUNT = 57459
const STRING = 57460
const CHARACTER_LITERAL = 57461
const STRING_LITERAL = 57462
const INT_LITERAL = 57463
const IDENT = 57464
const TERNARY = 57465
const RNG = 57466
const LOGICAL_OR = 57467
const LOGICAL_AND = 57468
const LE = 57469
const GE = 57470
const LT = 57471
const GT = 57472
const EQ = 57473
const NE = 57474
const OR = 57475
const XOR = 57476
const AND = 57477
const LSH = 57478
const RSH = 57479
const UPLUS = 57480
const UNEG = 57481
const UNOT = 57482
const CAST = 57483
const UMINUS = 57484
const UMUL = 57485

var RPCToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FLOAT",
	"DOUBLE",
	"HYPER",
	"UNSIGNED",
	"SIGNED",
	"LONG",
	"SHORT",
	"SMALL",
	"INT",
	"CHAR",
	"BOOLEAN",
	"BYTE",
	"VOID",
	"HANDLE_T",
	"ERROR_STATUS_T",
	"ISO_LATIN_1",
	"ISO_MULTILINGUAL",
	"ISO_UCS",
	"STRUCT",
	"FIRST_IS",
	"LAST_IS",
	"LENGTH_IS",
	"MAX_IS",
	"MIN_IS",
	"SIZE_IS",
	"SWITCH_IS",
	"USAGE_STRING",
	"USAGE_CONTEXT_HANDLE",
	"FORMAT",
	"FORMAT_NULL_TERMINATED",
	"FORMAT_MULTI_SIZE",
	"FORMAT_UTF8",
	"FORMAT_RUNE",
	"IGNORE",
	"POINTER",
	"POINTER_REF",
	"POINTER_UNIQUE",
	"POINTER_PTR",
	"CONST",
	"NULL",
	"TRUE",
	"FALSE",
	"IN",
	"OUT",
	"ENUM",
	"PIPE",
	"UNION",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"SWITCH_TYPE",
	"TRANSMIT_AS",
	"HANDLE",
	"IMPORT",
	"TYPEDEF",
	"UUID",
	"INTERFACE",
	"IDEMPOTENT",
	"BROADCAST",
	"MAYBE",
	"REFLECT_DELETIONS",
	"VERSION",
	"ENDPOINT",
	"EXCEPTIONS",
	"LOCAL",
	"POINTER_DEFAULT",
	"RETVAL",
	"IID_IS",
	"WCHAR_T",
	"INT3264",
	"INT8",
	"INT16",
	"INT32",
	"INT64",
	"RANGE",
	"MS_UNION",
	"OBJECT",
	"V1_ENUM",
	"STRICT_CONTEXT_HANDLE",
	"TYPE_STRICT_CONTEXT_HANDLE",
	"DISABLE_CONSISTENCY_CHECK",
	"SIZEOF",
	"PRAGMA_DEFINE",
	"PRAGMA_CPP_QUOTE",
	"CALLBACK",
	"HELP_STRING",
	"DUAL",
	"PROPGET",
	"PROPPUT",
	"PROPPUTREF",
	"ID",
	"HIDDEN",
	"NONEXTENSIBLE",
	"RESTRICTED",
	"DEFAULT_VALUE",
	"ODL",
	"OLEAUTOMATION",
	"OPTIONAL",
	"APPOBJECT",
	"SAFEARRAY",
	"PAD",
	"GOEXT_LAYOUT",
	"GOEXT_NO_SIZE_LIMIT",
	"CALL_AS",
	"ANNOTATION",
	"WIRE_MARSHAL",
	"PUBLIC",
	"SOURCE",
	"DISPINTERFACE",
	"METHODS",
	"PROPERTIES",
	"COCLASS",
	"LIBRARY",
	"ACS_BYTE_COUNT",
	"STRING",
	"CHARACTER_LITERAL",
	"STRING_LITERAL",
	"INT_LITERAL",
	"IDENT",
	"TERNARY",
	"RNG",
	"LOGICAL_OR",
	"LOGICAL_AND",
	"LE",
	"GE",
	"LT",
	"GT",
	"EQ",
	"NE",
	"OR",
	"XOR",
	"AND",
	"LSH",
	"RSH",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UPLUS",
	"UNEG",
	"UNOT",
	"CAST",
	"UMINUS",
	"UMUL",
	"';'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
	"':'",
	"'('",
	"')'",
	"'.'",
	"'='",
	"'?'",
	"'~'",
	"'!'",
}

var RPCStatenames = [...]string{}

const RPCEofCode = 1
const RPCErrCode = 2
const RPCInitialStackSize = 16

//line midl/parse.y:2740

//line yacctab:1
var RPCExca = [...]int16{
	-1, 0,
	1, 1,
	-2, 46,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 2,
	-2, 46,
	-1, 247,
	151, 115,
	-2, 46,
	-1, 263,
	113, 36,
	114, 36,
	151, 36,
	-2, 46,
	-1, 270,
	149, 198,
	154, 198,
	-2, 338,
	-1, 415,
	113, 37,
	114, 37,
	151, 37,
	-2, 46,
	-1, 416,
	113, 35,
	114, 35,
	151, 35,
	-2, 46,
	-1, 463,
	2, 338,
	122, 338,
	156, 338,
	-2, 198,
	-1, 552,
	157, 249,
	-2, 246,
	-1, 556,
	157, 249,
	-2, 246,
	-1, 580,
	157, 250,
	-2, 242,
}

const RPCPrivate = 57344

const RPCLast = 1056

var RPCAct = [...]int16{
	366, 584, 422, 181, 535, 582, 352, 26, 579, 365,
	534, 578, 577, 538, 386, 188, 360, 217, 383, 421,
	172, 359, 343, 356, 351, 347, 350, 344, 349, 346,
	19, 271, 19, 258, 66, 299, 74, 285, 284, 276,
	400, 250, 198, 195, 193, 191, 199, 197, 194, 192,
	213, 35, 5, 190, 86, 248, 56, 196, 200, 37,
	38, 39, 316, 477, 515, 79, 76, 364, 77, 565,
	311, 7, 182, 280, 14, 599, 14, 522, 605, 160,
	185, 186, 187, 599, 165, 597, 598, 493, 596, 206,
	492, 606, 491, 206, 169, 490, 206, 315, 489, 339,
	171, 297, 298, 300, 301, 65, 68, 69, 70, 600,
	590, 303, 304, 305, 306, 290, 308, 309, 310, 293,
	479, 159, 206, 484, 479, 205, 207, 483, 479, 205,
	207, 482, 205, 207, 485, 479, 576, 479, 481, 272,
	480, 575, 201, 202, 586, 295, 296, 294, 208, 201,
	202, 208, 479, 532, 506, 478, 184, 183, 205, 207,
	209, 476, 505, 504, 209, 203, 204, 209, 552, 307,
	555, 270, 203, 204, 556, 201, 202, 208, 251, 503,
	502, 501, 500, 499, 498, 497, 496, 495, 160, 27,
	312, 494, 313, 209, 314, 488, 487, 521, 203, 204,
	486, 249, 458, 341, 541, 358, 338, 244, 242, 20,
	182, 267, 241, 340, 240, 31, 239, 29, 238, 292,
	237, 236, 14, 235, 10, 234, 233, 232, 231, 342,
	266, 518, 230, 229, 391, 182, 345, 228, 392, 227,
	226, 389, 225, 224, 396, 407, 223, 222, 221, 33,
	220, 399, 219, 21, 22, 72, 595, 570, 379, 531,
	334, 335, 336, 337, 398, 269, 264, 263, 155, 144,
	515, 206, 508, 27, 145, 412, 413, 251, 401, 218,
	403, 402, 404, 410, 363, 388, 415, 345, 367, 368,
	369, 370, 371, 20, 418, 540, 608, 603, 542, 31,
	249, 29, 432, 408, 427, 511, 417, 205, 207, 540,
	539, 355, 182, 561, 33, 437, 438, 459, 419, 33,
	355, 14, 468, 33, 201, 202, 372, 355, 540, 539,
	33, 76, 77, 560, 467, 33, 169, 21, 22, 558,
	33, 215, 209, 355, 457, 429, 357, 203, 204, 465,
	467, 153, 463, 460, 33, 10, 362, 469, 265, 33,
	470, 252, 153, 440, 442, 444, 445, 345, 441, 443,
	439, 461, 452, 453, 466, 450, 451, 475, 454, 455,
	456, 446, 447, 448, 449, 73, 157, 156, 592, 544,
	75, 75, 355, 246, 401, 33, 403, 402, 404, 474,
	215, 553, 151, 33, 559, 464, 216, 514, 607, 212,
	49, 48, 75, 47, 46, 510, 471, 41, 431, 428,
	462, 36, 425, 262, 261, 523, 409, 566, 45, 44,
	43, 331, 332, 333, 330, 329, 320, 170, 318, 345,
	430, 169, 507, 461, 167, 319, 418, 512, 317, 147,
	410, 524, 345, 528, 529, 525, 530, 527, 513, 526,
	297, 298, 300, 301, 65, 68, 69, 70, 327, 328,
	303, 304, 305, 306, 290, 308, 309, 310, 546, 325,
	326, 323, 324, 533, 321, 322, 604, 339, 387, 547,
	361, 543, 348, 545, 509, 75, 420, 411, 395, 214,
	394, 166, 164, 163, 162, 161, 71, 548, 550, 551,
	549, 397, 381, 384, 54, 393, 390, 42, 554, 210,
	51, 557, 54, 78, 53, 157, 156, 4, 307, 255,
	259, 540, 539, 426, 469, 472, 473, 174, 434, 567,
	302, 182, 182, 568, 571, 573, 562, 563, 345, 574,
	569, 466, 461, 253, 1, 291, 587, 134, 135, 136,
	581, 67, 173, 245, 581, 433, 373, 174, 589, 588,
	591, 68, 69, 70, 149, 593, 52, 594, 292, 51,
	50, 256, 68, 69, 70, 602, 168, 601, 260, 375,
	376, 374, 377, 87, 63, 64, 567, 211, 182, 3,
	62, 609, 34, 288, 611, 587, 612, 581, 610, 297,
	298, 300, 301, 65, 68, 69, 70, 287, 286, 303,
	304, 305, 306, 290, 308, 309, 310, 293, 297, 298,
	300, 301, 65, 68, 69, 70, 289, 175, 303, 304,
	580, 306, 290, 308, 309, 310, 293, 272, 283, 282,
	274, 55, 354, 295, 296, 294, 537, 536, 59, 65,
	68, 69, 70, 353, 58, 60, 272, 61, 175, 436,
	564, 585, 295, 296, 294, 435, 583, 307, 68, 69,
	70, 406, 65, 68, 69, 70, 520, 519, 303, 423,
	424, 517, 414, 516, 189, 572, 307, 107, 179, 176,
	177, 178, 180, 297, 298, 300, 301, 65, 68, 69,
	70, 91, 89, 303, 304, 305, 306, 290, 308, 309,
	310, 293, 405, 257, 152, 243, 275, 292, 378, 179,
	176, 177, 178, 180, 30, 24, 93, 25, 32, 273,
	23, 272, 28, 254, 279, 281, 292, 295, 296, 294,
	278, 277, 11, 13, 12, 148, 40, 73, 385, 382,
	380, 80, 81, 82, 84, 83, 85, 139, 137, 138,
	88, 307, 247, 57, 146, 90, 33, 134, 135, 136,
	268, 416, 154, 17, 140, 141, 8, 150, 16, 15,
	472, 473, 142, 92, 94, 6, 292, 99, 158, 95,
	96, 97, 98, 100, 101, 102, 103, 104, 111, 112,
	18, 9, 2, 0, 0, 0, 143, 106, 109, 105,
	0, 292, 108, 0, 0, 0, 110, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 131, 132, 133, 0, 128, 127, 129, 130, 80,
	81, 82, 84, 83, 85, 139, 137, 138, 88, 0,
	0, 0, 0, 90, 0, 134, 135, 136, 0, 0,
	0, 0, 140, 141, 0, 0, 0, 0, 0, 0,
	142, 92, 94, 0, 0, 99, 0, 95, 96, 97,
	98, 100, 101, 102, 103, 104, 111, 112, 0, 0,
	0, 0, 0, 0, 143, 106, 109, 105, 0, 0,
	108, 0, 0, 0, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 131,
	132, 133, 0, 128, 127, 129, 130, 297, 298, 300,
	301, 65, 68, 69, 70, 0, 0, 303, 304, 305,
	306, 290, 308, 309, 310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292,
}

var RPCPact = [...]int16{
	167, -1000, 167, -1000, -1000, -1000, 272, 272, 272, 272,
	397, 281, 280, -1000, 279, 264, 263, 261, 260, 464,
	651, 384, 99, -1000, -1000, -1000, 233, 373, -1000, 373,
	-1000, 373, -1000, 826, -1000, -1000, -1000, -1000, -1000, -1000,
	120, -1000, -1000, -1000, -1000, -1000, 298, 199, 412, 183,
	383, 382, 381, 380, 183, 379, -1000, -1000, 304, 573,
	-1000, 297, -1000, -1000, -1000, 562, 555, 625, -1000, -1000,
	-1000, 37, 399, 826, 259, -1000, 349, 256, 125, -1000,
	96, 94, 92, 91, 90, 87, -1000, -1000, 86, -1000,
	-1000, -1000, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	83, 81, 77, -1000, 76, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 72, 71, -1000, -1000, -1000, -1000, 70, -1000,
	-1000, -1000, 69, -1000, -1000, -1000, -1000, 67, 65, 64,
	-1000, 62, 60, 58, -1000, -1000, -1000, -1000, -1000, 56,
	-1000, -1000, 52, 51, -1000, 397, 242, -1000, 251, -1000,
	210, -1000, 469, 477, 273, -1000, 112, 111, 207, 272,
	405, -1000, -1000, -1000, 110, 699, -89, -1000, -1000, 525,
	-1000, 525, -1000, 525, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -63,
	322, 305, 311, 301, 353, 352, 332, 296, 291, -1000,
	-1000, 8, 8, 8, 8, -1000, 50, -1000, 365, 37,
	46, 125, 183, 370, 194, 49, 368, 203, 826, 11,
	11, 11, 11, 11, 186, 556, 933, 391, 393, 366,
	518, 11, 396, 11, 37, 395, 378, 376, 699, 390,
	183, 11, 674, -1000, 11, -1000, -1000, 251, -1000, -1000,
	277, 456, -1000, -1000, 375, -1000, -1000, 122, -1000, -1000,
	-1000, -1000, -1000, 183, 183, -1000, 272, -1000, -1000, 374,
	282, 491, 933, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 269, 290, 268, 699, -1000, -1000, -1000,
	531, 669, 656, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 37, -1000, -1000, -1000, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, -1000, -1000, -1000, -1000, 699, -1000,
	45, -1000, 164, 202, -1000, 271, 699, 255, -1000, 198,
	171, -1000, -1000, 178, -1000, -1000, 267, 738, 674, 7,
	-1000, -96, -1000, -1000, -2, -1000, -1000, -17, -19, -26,
	-30, -34, -23, 43, -1000, -1000, -1000, -1000, 39, -1000,
	38, -60, -62, -1000, -1000, -67, -1000, -1000, 34, 30,
	29, 28, 27, 26, 25, 24, 23, 22, 6, 5,
	-3, -1000, -1000, -1000, -1000, 373, 562, 118, -1000, -1000,
	372, 266, 152, 477, -1000, 183, 183, 258, 933, -1000,
	-1000, 116, -1000, 75, 285, -1000, -1000, -1000, 183, 370,
	194, 368, -1000, 525, -1000, 525, -1000, -1000, 104, 322,
	305, 311, 301, 353, 352, 352, 332, 332, 332, 332,
	296, 296, 291, 291, -1000, -1000, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, 282, 479, -1000, -1000, 483, -1000, -1000,
	-1000, -1000, 48, 145, 369, 238, 368, 11, -1000, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 386,
	-1000, 393, -1000, 366, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11, 12,
	-1000, -1000, -1000, 252, -1000, 282, 18, -1000, 282, -1000,
	-1000, -1000, -1000, -1000, 188, 254, 182, 162, 7, -1000,
	-1000, 11, -1000, -90, 276, -1000, 243, -1000, -1000, 102,
	37, 37, 178, -16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -21, 624, -1000, -1000, 4, 624, -47, -1000, 479,
	-1000, -1000, 237, -1000, -1000, 11, -1000, -1000, -1000, -1000,
	178, 101, -69, -1000, -1000, -1000, -1000, -71, -48, -1000,
	-1000, 605, 282, 144, 362, -1000, 365, -1000, -79, -66,
	-1000, 257, -1000, -1000, -1000, -1000, 143, 37, -1000, 97,
	-1000, 282, -1000, -1000, 4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var RPCPgo = [...]int16{
	0, 599, 812, 811, 810, 798, 795, 789, 71, 788,
	787, 402, 786, 783, 782, 268, 781, 780, 774, 55,
	772, 760, 759, 18, 758, 14, 756, 755, 527, 417,
	52, 41, 754, 753, 752, 751, 750, 745, 744, 5,
	743, 742, 740, 739, 73, 738, 737, 40, 736, 735,
	734, 728, 31, 39, 726, 725, 523, 29, 7, 724,
	723, 65, 33, 712, 711, 697, 695, 3, 0, 15,
	694, 53, 45, 49, 44, 48, 43, 57, 47, 42,
	46, 58, 2, 693, 19, 8, 12, 22, 692, 27,
	23, 36, 691, 690, 689, 16, 687, 686, 676, 671,
	1, 670, 9, 67, 21, 50, 10, 28, 26, 25,
	4, 24, 663, 657, 13, 6, 656, 652, 651, 650,
	649, 648, 38, 636, 37, 618, 617, 603, 35, 600,
	595, 594, 593, 566, 565, 540, 34, 555, 54, 554,
	51, 17, 20, 11,
}

var RPCR1 = [...]uint8{
	0, 139, 139, 2, 2, 1, 1, 1, 1, 1,
	1, 140, 140, 3, 4, 5, 5, 8, 9, 10,
	10, 11, 40, 40, 59, 59, 60, 60, 62, 62,
	12, 13, 14, 14, 15, 15, 88, 88, 16, 16,
	6, 6, 6, 7, 17, 17, 57, 57, 58, 58,
	56, 56, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 21, 21, 22,
	22, 24, 24, 23, 25, 18, 20, 20, 27, 27,
	28, 19, 19, 30, 30, 30, 30, 26, 26, 29,
	32, 33, 33, 118, 118, 118, 118, 118, 118, 118,
	67, 67, 67, 67, 67, 67, 68, 69, 69, 70,
	70, 71, 71, 72, 72, 73, 73, 74, 74, 75,
	75, 75, 76, 76, 76, 76, 76, 77, 77, 77,
	78, 78, 78, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 81, 81, 81, 81, 81, 34, 39, 39,
	39, 39, 52, 52, 52, 53, 84, 84, 84, 82,
	83, 83, 83, 83, 92, 92, 44, 44, 44, 119,
	119, 119, 119, 119, 119, 119, 119, 120, 120, 121,
	121, 121, 128, 128, 128, 129, 129, 131, 131, 130,
	130, 130, 130, 130, 130, 136, 136, 136, 122, 123,
	124, 125, 126, 127, 134, 134, 135, 135, 135, 143,
	143, 142, 142, 43, 43, 43, 43, 43, 42, 42,
	35, 41, 91, 87, 87, 89, 90, 101, 101, 49,
	49, 36, 36, 36, 105, 47, 47, 47, 47, 47,
	50, 50, 50, 109, 109, 106, 106, 108, 108, 107,
	107, 110, 110, 113, 113, 111, 111, 114, 112, 66,
	66, 116, 117, 115, 115, 48, 63, 38, 46, 46,
	45, 104, 104, 141, 141, 95, 95, 37, 96, 98,
	98, 98, 99, 100, 100, 132, 132, 133, 133, 133,
	133, 51, 65, 55, 103, 103, 102, 102, 94, 94,
	93, 93, 138, 138, 138, 31, 31, 86, 86, 85,
	85, 64, 64, 97, 97, 54, 54, 137, 137, 137,
}

var RPCR2 = [...]int8{
	0, 0, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 0, 1, 4, 3, 2, 3, 4, 3, 1,
	2, 4, 1, 1, 0, 4, 1, 3, 1, 1,
	4, 3, 1, 2, 3, 3, 0, 1, 2, 3,
	4, 1, 3, 4, 0, 2, 0, 1, 4, 5,
	1, 3, 4, 4, 4, 4, 4, 4, 1, 1,
	4, 1, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 1, 1, 1, 1,
	4, 1, 1, 1, 4, 1, 1, 1, 1, 4,
	4, 4, 1, 4, 4, 4, 4, 1, 3, 1,
	3, 1, 3, 1, 1, 2, 1, 2, 0, 1,
	3, 1, 2, 2, 2, 1, 2, 1, 3, 1,
	5, 3, 4, 1, 1, 1, 2, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 2,
	2, 2, 1, 4, 1, 2, 3, 5, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 3, 0, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 3, 2, 3, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 0,
	1, 0, 1, 1, 1, 1, 1, 1, 2, 1,
	4, 5, 1, 1, 2, 2, 4, 0, 2, 2,
	1, 6, 4, 4, 5, 1, 1, 1, 1, 2,
	7, 5, 5, 0, 1, 1, 2, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 1, 3, 6, 1,
	3, 3, 4, 1, 2, 4, 4, 5, 2, 1,
	6, 1, 3, 0, 1, 1, 3, 2, 4, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 5, 1, 3, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 6, 6, 3, 1, 3,
	2, 1, 1, 4, 4, 1, 1, 1, 1, 1,
}

var RPCChk = [...]int16{
	-1000, -139, -2, -1, -28, -30, -6, -8, -12, -3,
	57, -34, -32, -33, -44, -7, -9, -13, -4, -57,
	42, 86, 87, -42, -49, -46, -58, 22, -41, 50,
	-50, 48, -45, 152, -1, -140, 149, -140, -140, -140,
	-26, -29, 120, 149, 149, 149, 150, 150, 150, 150,
	116, 115, 112, 60, 58, -118, -128, 122, 13, 7,
	14, 16, -129, -131, -130, 8, -136, -135, 9, 10,
	11, 122, 156, 152, -91, 122, -91, -91, -56, -61,
	23, 24, 25, 27, 26, 28, -138, -132, 32, -63,
	37, -64, 55, -48, 56, 61, 62, 63, 64, 59,
	65, 66, 67, 68, 69, 81, 79, -65, 84, 80,
	88, 70, 71, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 108, 107, 109,
	110, 103, 104, 105, 39, 40, 41, 30, 31, 29,
	46, 47, 54, 78, 149, 154, -18, 151, -27, -28,
	-10, -11, -59, 152, -14, -15, 114, 113, -5, -8,
	-57, 122, 122, 122, 122, -57, 122, 140, 13, -136,
	140, -136, -142, 7, 12, 12, 74, 75, 76, 73,
	77, -67, -68, 120, 119, 43, 44, 45, -69, -70,
	-71, -72, -73, -74, -75, -76, -77, -78, -79, -80,
	-81, 138, 139, 161, 162, 121, 85, 122, 140, 156,
	120, -56, 150, -105, 150, 51, 150, -141, 154, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, -55, 156, -29, 151, -20, -19, -30,
	-31, -57, 151, -11, -40, 60, 112, -60, -62, 53,
	111, 151, -15, 155, 155, 151, -8, -140, -17, 155,
	-39, -52, 42, -43, -119, -54, -53, -35, -36, -38,
	-44, -37, -120, -121, -122, -124, -125, -126, -127, -123,
	18, -137, 122, 22, 50, 48, 49, 4, 5, -128,
	6, 7, -135, 14, 15, 16, 17, 72, 19, 20,
	21, 159, -142, -142, -142, 160, 125, 126, 133, 134,
	135, 131, 132, 129, 130, 127, 128, 136, 137, 139,
	138, 140, 141, 142, -81, -81, -81, -81, 156, 122,
	-67, 157, -141, -87, -89, -90, -57, -109, 122, -107,
	-108, -111, -115, -112, -117, 149, -90, 152, 156, -104,
	-95, 122, 153, -61, -103, -102, -68, -103, -103, -103,
	-103, -103, 140, -133, 35, 33, 34, 36, -51, -52,
	-21, 121, -22, -23, 120, -24, -25, 122, -138, -102,
	120, -68, -67, 120, 122, 122, -39, 121, -90, -102,
	-47, -128, -122, -124, -53, 48, 7, -68, -19, 149,
	-52, 122, -141, 154, -88, -87, -16, -31, -57, -140,
	122, -84, -82, -94, -93, 140, 42, -52, 150, -105,
	150, 150, -39, -134, 7, 6, 13, -67, -68, -71,
	-72, -73, -74, -75, -76, -76, -77, -77, -77, -77,
	-78, -78, -79, -79, -80, -80, -80, -39, 157, 153,
	151, -89, 149, -39, 150, 151, -111, 152, 151, -115,
	-115, 149, 52, 53, -47, -141, 154, 159, 157, 154,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 158,
	157, 154, 157, 154, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, -91, 154, 122,
	149, 153, -62, -31, 149, 154, -83, -92, 156, -96,
	-97, 122, 2, 140, -87, -109, -107, -108, -104, -142,
	-142, 155, 157, -84, -106, -110, -113, -116, -114, 53,
	52, 156, 153, 122, 151, -95, -68, -102, 121, -23,
	-25, -68, 156, 149, -82, 152, 156, -82, 151, 150,
	151, 151, -141, -69, -101, 159, 151, -110, -115, -114,
	155, -67, -66, -67, -115, 157, 157, -86, -143, -85,
	16, -58, -39, -98, -100, -99, 140, -68, -86, -143,
	157, -106, 151, -102, -115, 155, 157, 154, 157, 154,
	157, -39, -82, 153, 124, 157, 157, 151, 153, -67,
	-85, -82, -100,
}

var RPCDef = [...]int16{
	-2, -2, -2, 3, 5, 6, 11, 11, 11, 11,
	0, 0, 0, 125, 0, 41, 0, 0, 0, 0,
	246, 0, 0, 206, 207, 208, 47, 0, 259, 0,
	270, 0, 309, 0, 4, 7, 12, 8, 9, 10,
	0, 127, 129, 123, 124, 126, 118, 24, 0, 46,
	0, 0, 0, 0, 46, 0, 133, 134, 135, 247,
	137, 0, 222, 223, 224, 248, 251, 0, 235, 236,
	237, 0, 0, 0, 258, 262, 269, 308, 313, 50,
	0, 0, 0, 0, 0, 0, 58, 59, 0, 61,
	62, 63, 0, 65, 66, 67, 68, 69, 70, 71,
	0, 0, 0, 75, 0, 77, 78, 79, 80, 81,
	82, 83, 0, 0, 86, 87, 88, 89, 0, 91,
	92, 93, 0, 95, 96, 97, 98, 0, 0, 0,
	102, 0, 0, 0, 342, 343, 344, 325, 326, 0,
	351, 352, 0, 0, 120, 0, 0, 42, 46, 119,
	24, 19, 0, 0, 0, 32, 0, 0, 46, 11,
	0, 14, 18, 31, 44, 246, 0, 139, 136, 251,
	138, 251, 226, 251, 252, 229, 230, 231, 232, 233,
	234, 131, 140, 141, 142, 143, 144, 145, 146, 147,
	149, 151, 153, 155, 157, 159, 162, 167, 170, 173,
	177, 0, 0, 0, 0, 182, 0, 184, 0, 0,
	0, 313, 46, 283, 46, 0, 0, 0, 314, 336,
	336, 336, 336, 336, 336, 0, 246, 0, 0, 0,
	0, 336, 0, 0, 0, 0, 0, 0, 246, 0,
	46, 336, 246, 332, 0, 128, 40, -2, 116, 121,
	0, 246, 17, 20, 0, 22, 23, 313, 26, 28,
	29, 30, 33, -2, 46, 13, 11, 15, 43, 0,
	-2, 188, 246, 191, 192, 193, 194, 253, 254, 255,
	256, 257, 209, 210, 211, 212, 213, 214, 215, 216,
	355, 356, 195, 0, 0, 0, 246, 217, 218, 219,
	244, 247, 0, 240, 241, 242, 243, 239, 357, 358,
	359, 0, 228, 225, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 180, 181, 246, 185,
	0, 132, 0, 46, 263, 0, 246, 0, 284, 0,
	46, 289, 287, 46, 296, 303, 0, 0, 246, 313,
	311, 315, 48, 51, 0, 334, 337, 0, 0, 0,
	0, 0, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 107, 0, 109, 113, 0, 111, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 278, 0, 247, 0, 117, 122,
	0, 0, 0, 314, 34, -2, -2, 0, 246, 16,
	45, 187, 196, 0, 339, 340, 190, 189, 46, 283,
	46, 0, 317, 251, 245, 251, 238, 130, 0, 150,
	152, 154, 156, 158, 160, 161, 163, 164, 165, 166,
	168, 169, 171, 172, 174, 175, 176, 0, 186, 49,
	261, 264, 265, -2, 0, 281, 290, 0, 282, 288,
	295, 304, 0, 0, 0, 0, 314, 0, 52, 336,
	53, 54, 55, 56, 57, 106, 60, 64, 72, 0,
	73, 0, 74, 0, 76, 84, 85, 90, 94, 99,
	100, 101, 103, 104, 105, 306, 305, 279, 0, 0,
	21, 25, 27, 0, 38, 338, 199, 200, 338, 202,
	203, 204, 205, 341, 46, 0, 0, 46, 313, 220,
	221, 0, 183, 267, 0, 285, 46, 292, 293, 0,
	0, 0, 46, 0, 310, 312, 316, 335, 108, 110,
	112, 0, -2, 39, 197, 319, -2, 0, 260, 0,
	272, 273, 0, 148, 266, 336, 280, 286, 291, 294,
	46, 0, 0, 299, 302, 274, 333, 0, 0, 348,
	-2, 246, 338, 0, 320, 321, 323, 324, 0, 0,
	201, 0, 307, 268, 301, 297, 0, 0, 345, 246,
	346, 338, 350, 318, 0, 353, 354, 271, 298, 300,
	347, 349, 322,
}

var RPCTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 162, 3, 3, 3, 142, 3, 3,
	156, 157, 140, 138, 154, 139, 158, 141, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 155, 149,
	3, 159, 3, 160, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 152, 3, 153, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 150, 3, 151, 161,
}

var RPCTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 143, 144, 145, 146,
	147, 148,
}

var RPCTok3 = [...]int8{
	0,
}

var RPCErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	RPCDebug        = 0
	RPCErrorVerbose = false
)

type RPCLexer interface {
	Lex(lval *RPCSymType) int
	Error(s string)
}

type RPCParser interface {
	Parse(RPCLexer) int
	Lookahead() int
}

type RPCParserImpl struct {
	lval  RPCSymType
	stack [RPCInitialStackSize]RPCSymType
	char  int
}

func (p *RPCParserImpl) Lookahead() int {
	return p.char
}

func RPCNewParser() RPCParser {
	return &RPCParserImpl{}
}

const RPCFlag = -1000

func RPCTokname(c int) string {
	if c >= 1 && c-1 < len(RPCToknames) {
		if RPCToknames[c-1] != "" {
			return RPCToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RPCStatname(s int) string {
	if s >= 0 && s < len(RPCStatenames) {
		if RPCStatenames[s] != "" {
			return RPCStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func RPCErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !RPCErrorVerbose {
		return "syntax error"
	}

	for _, e := range RPCErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + RPCTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(RPCPact[state])
	for tok := TOKSTART; tok-1 < len(RPCToknames); tok++ {
		if n := base + tok; n >= 0 && n < RPCLast && int(RPCChk[int(RPCAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if RPCDef[state] == -2 {
		i := 0
		for RPCExca[i] != -1 || int(RPCExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; RPCExca[i] >= 0; i += 2 {
			tok := int(RPCExca[i])
			if tok < TOKSTART || RPCExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if RPCExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += RPCTokname(tok)
	}
	return res
}

func RPClex1(lex RPCLexer, lval *RPCSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(RPCTok1[0])
		goto out
	}
	if char < len(RPCTok1) {
		token = int(RPCTok1[char])
		goto out
	}
	if char >= RPCPrivate {
		if char < RPCPrivate+len(RPCTok2) {
			token = int(RPCTok2[char-RPCPrivate])
			goto out
		}
	}
	for i := 0; i < len(RPCTok3); i += 2 {
		token = int(RPCTok3[i+0])
		if token == char {
			token = int(RPCTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(RPCTok2[1]) /* unknown char */
	}
	if RPCDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RPCTokname(token), uint(char))
	}
	return char, token
}

func RPCParse(RPClex RPCLexer) int {
	return RPCNewParser().Parse(RPClex)
}

func (RPCrcvr *RPCParserImpl) Parse(RPClex RPCLexer) int {
	var RPCn int
	var RPCVAL RPCSymType
	var RPCDollar []RPCSymType
	_ = RPCDollar // silence set and not used
	RPCS := RPCrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	RPCstate := 0
	RPCrcvr.char = -1
	RPCtoken := -1 // RPCrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		RPCstate = -1
		RPCrcvr.char = -1
		RPCtoken = -1
	}()
	RPCp := -1
	goto RPCstack

ret0:
	return 0

ret1:
	return 1

RPCstack:
	/* put a state and value onto the stack */
	if RPCDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RPCTokname(RPCtoken), RPCStatname(RPCstate))
	}

	RPCp++
	if RPCp >= len(RPCS) {
		nyys := make([]RPCSymType, len(RPCS)*2)
		copy(nyys, RPCS)
		RPCS = nyys
	}
	RPCS[RPCp] = RPCVAL
	RPCS[RPCp].yys = RPCstate

RPCnewstate:
	RPCn = int(RPCPact[RPCstate])
	if RPCn <= RPCFlag {
		goto RPCdefault /* simple state */
	}
	if RPCrcvr.char < 0 {
		RPCrcvr.char, RPCtoken = RPClex1(RPClex, &RPCrcvr.lval)
	}
	RPCn += RPCtoken
	if RPCn < 0 || RPCn >= RPCLast {
		goto RPCdefault
	}
	RPCn = int(RPCAct[RPCn])
	if int(RPCChk[RPCn]) == RPCtoken { /* valid shift */
		RPCrcvr.char = -1
		RPCtoken = -1
		RPCVAL = RPCrcvr.lval
		RPCstate = RPCn
		if Errflag > 0 {
			Errflag--
		}
		goto RPCstack
	}

RPCdefault:
	/* default state action */
	RPCn = int(RPCDef[RPCstate])
	if RPCn == -2 {
		if RPCrcvr.char < 0 {
			RPCrcvr.char, RPCtoken = RPClex1(RPClex, &RPCrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RPCExca[xi+0] == -1 && int(RPCExca[xi+1]) == RPCstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			RPCn = int(RPCExca[xi+0])
			if RPCn < 0 || RPCn == RPCtoken {
				break
			}
		}
		RPCn = int(RPCExca[xi+1])
		if RPCn < 0 {
			goto ret0
		}
	}
	if RPCn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			RPClex.Error(RPCErrorMessage(RPCstate, RPCtoken))
			Nerrs++
			if RPCDebug >= 1 {
				__yyfmt__.Printf("%s", RPCStatname(RPCstate))
				__yyfmt__.Printf(" saw %s\n", RPCTokname(RPCtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for RPCp >= 0 {
				RPCn = int(RPCPact[RPCS[RPCp].yys]) + RPCErrCode
				if RPCn >= 0 && RPCn < RPCLast {
					RPCstate = int(RPCAct[RPCn]) /* simulate a shift of "error" */
					if int(RPCChk[RPCstate]) == RPCErrCode {
						goto RPCstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RPCDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RPCS[RPCp].yys)
				}
				RPCp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RPCDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RPCTokname(RPCtoken))
			}
			if RPCtoken == RPCEofCode {
				goto ret1
			}
			RPCrcvr.char = -1
			RPCtoken = -1
			goto RPCnewstate /* try again in the same state */
		}
	}

	/* reduction by production RPCn */
	if RPCDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", RPCn, RPCStatname(RPCstate))
	}

	RPCnt := RPCn
	RPCpt := RPCp
	_ = RPCpt // guard against "declared and not used"

	RPCp -= int(RPCR2[RPCn])
	// RPCp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if RPCp+1 >= len(RPCS) {
		nyys := make([]RPCSymType, len(RPCS)*2)
		copy(nyys, RPCS)
		RPCS = nyys
	}
	RPCVAL = RPCS[RPCp+1]

	/* consult goto table to find next state */
	RPCn = int(RPCR1[RPCn])
	RPCg := int(RPCPgo[RPCn])
	RPCj := RPCg + RPCS[RPCp].yys + 1

	if RPCj >= RPCLast {
		RPCstate = int(RPCAct[RPCg])
	} else {
		RPCstate = int(RPCAct[RPCj])
		if int(RPCChk[RPCstate]) != -RPCn {
			RPCstate = int(RPCAct[RPCg])
		}
	}
	// dummy call; replaced with literal code
	switch RPCnt {

	case 2:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:360
		{
			f := RPCDollar[1].File
			setResult(RPClex, &f)
		}
	case 3:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:367
		{
			RPCVAL.File = RPCDollar[1].File
			if len(RPCVAL.File.Interfaces) > 0 {
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for i := range RPCVAL.File.Interfaces {
					iff := RPCVAL.File.Interfaces[i]
					if iff.Attrs.Object || iff.BaseName != "" {
						RPCVAL.File.Export[iff.Name] = &Export{Type: InterfaceToExport(iff), Position: Hash(iff.Name)}
					}
				}
			}
		}
	case 4:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:382
		{
			if len(RPCDollar[2].File.Imports) > 0 {
				RPCVAL.File.Imports = append(RPCVAL.File.Imports, RPCDollar[2].File.Imports...)
			}
			if len(RPCDollar[2].File.Export) > 0 {
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for k, v := range RPCDollar[2].File.Export {
					RPCVAL.File.Export[k] = v
				}
			}
			if len(RPCDollar[2].File.Interfaces) > 0 {
				RPCVAL.File.Interfaces = append(RPCVAL.File.Interfaces, RPCDollar[2].File.Interfaces...)
				if RPCVAL.File.Export == nil {
					RPCVAL.File.Export = make(map[string]*Export)
				}
				for i := range RPCDollar[2].File.Interfaces {
					iff := RPCDollar[2].File.Interfaces[i]
					if iff.Attrs.Object || iff.BaseName != "" {
						RPCVAL.File.Export[iff.Name] = &Export{Type: InterfaceToExport(iff), Position: Hash(iff.Name)}
					}
				}
			}
			if len(RPCDollar[2].File.ComClasses) > 0 {
				RPCVAL.File.ComClasses = append(RPCVAL.File.ComClasses, RPCDollar[2].File.ComClasses...)
			}
			if len(RPCDollar[2].File.DispatchInterfaces) > 0 {
				RPCVAL.File.DispatchInterfaces = append(RPCVAL.File.DispatchInterfaces, RPCDollar[2].File.DispatchInterfaces...)
			}
			if len(RPCDollar[2].File.Libraries) > 0 {
				RPCVAL.File.Libraries = append(RPCVAL.File.Libraries, RPCDollar[2].File.Libraries...)
			}
		}
	case 5:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:419
		{
			RPCVAL.File = File{Imports: RPCDollar[1].Strings}
		}
	case 6:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:423
		{
			RPCVAL.File = File{Export: make(map[string]*Export)}
			if len(RPCDollar[1].Export) > 0 {
				for _, e := range RPCDollar[1].Export {
					RPCVAL.File.Export[e.Name] = e
					exportSyms(RPClex, e.Name, e)
				}
			}
		}
	case 7:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:433
		{
			iff := RPCDollar[1].Interface
			if iff.Attrs != nil {
				RPCVAL.File = File{Interfaces: []*Interface{&iff}}
			}
			if iff.BaseName != "" {
				typ, ok := lookupType(RPClex, iff.BaseName)
				if !ok {
					RPClex.Error("cannot find interface " + iff.BaseName)
					return 0
				}

				if typ.Kind == TypeAttribute {
					typ = typ.Elem
				}

				if iff.Base = typ.Interface; iff.Base != nil {
					inc := 0
					if l := len(iff.Base.Body.Operations); l > 0 {
						inc = iff.Base.Body.Operations[l-1].OpNum + 1
					}
					for i := range iff.Body.Operations {
						iff.Body.Operations[i].OpNum += inc
					}
				}
			}
			exportSyms(RPClex, iff.Name, &Export{Type: InterfaceToExport(&iff)})
		}
	case 8:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:462
		{
			cc := RPCDollar[1].ComClass
			RPCVAL.File = File{ComClasses: []*ComClass{&cc}}
		}
	case 9:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:467
		{
			di := RPCDollar[1].DispatchInterface
			RPCVAL.File = File{DispatchInterfaces: []*DispatchInterface{&di}}
		}
	case 10:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:472
		{
			lib := RPCDollar[1].Library
			RPCVAL.File = File{Libraries: []*Library{&lib}}
		}
	case 13:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:483
		{
			RPCVAL.Library = Library{Attrs: RPCDollar[1].Library.Attrs, Name: RPCDollar[1].Library.Name, Body: RPCDollar[3].Library.Body}
		}
	case 14:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:489
		{
			RPCVAL.Library = Library{Attrs: RPCDollar[1].Attr.Library(), Name: RPCDollar[3].Ident}
		}
	case 15:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:495
		{
			cc := RPCDollar[1].ComClass
			RPCVAL.Library = Library{Body: LibraryBody{ComClasses: []*ComClass{&cc}}}
		}
	case 16:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:500
		{
			cc := RPCDollar[2].ComClass
			RPCVAL.Library.Body.ComClasses = append(RPCVAL.Library.Body.ComClasses, &cc)
		}
	case 17:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:507
		{
			RPCVAL.ComClass = ComClass{Name: RPCDollar[1].ComClass.Name, Attrs: RPCDollar[1].ComClass.Attrs, Interfaces: RPCDollar[3].ComInterfaces}
		}
	case 18:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:513
		{
			RPCVAL.ComClass = ComClass{Attrs: RPCDollar[1].Attr.ComClass(), Name: RPCDollar[3].Ident}
		}
	case 19:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:519
		{
			RPCVAL.ComInterfaces = []*ComInterface{RPCDollar[1].ComInterface}
		}
	case 20:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:523
		{
			RPCVAL.ComInterfaces = append(RPCVAL.ComInterfaces, RPCDollar[2].ComInterface)
		}
	case 21:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:529
		{
			RPCVAL.ComInterface = &ComInterface{Name: RPCDollar[3].Ident, Type: RPCDollar[2].Type, Attrs: RPCDollar[1].Attr.ComInterface()}
		}
	case 22:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:535
		{
			RPCVAL.Type = &Type{Kind: TypeInterface}
		}
	case 23:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:539
		{
			RPCVAL.Type = &Type{Kind: TypeDispInterface}
		}
	case 24:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:545
		{
			RPCVAL.Attr = pAttr{}
		}
	case 25:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:549
		{
			RPCVAL.Attr = RPCDollar[2].Attr
		}
	case 26:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:555
		{
			switch RPCDollar[1].AttrType.Type {
			case DEFAULT:
				RPCVAL.Attr.Default = true
			case SOURCE:
				RPCVAL.Attr.Source = true
			}
		}
	case 27:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:564
		{
			switch RPCDollar[3].AttrType.Type {
			case DEFAULT:
				RPCVAL.Attr.Default = true
			case SOURCE:
				RPCVAL.Attr.Source = true
			}
		}
	case 28:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:576
		{
			RPCVAL.AttrType = pAttrType{DEFAULT, pAttr{}}
		}
	case 29:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:580
		{
			RPCVAL.AttrType = pAttrType{SOURCE, pAttr{}}
		}
	case 30:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:586
		{
			RPCVAL.DispatchInterface = DispatchInterface{Name: RPCDollar[1].DispatchInterface.Name, Attrs: RPCDollar[1].DispatchInterface.Attrs, Body: RPCDollar[3].DispatchInterfaceBody}
			for i := range RPCDollar[3].DispatchInterfaceBody.Methods {
				RPCDollar[3].DispatchInterfaceBody.Methods[i].OpNum = i
			}
		}
	case 31:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:595
		{
			RPCVAL.DispatchInterface = DispatchInterface{Attrs: RPCDollar[1].Attr.DispatchInterface(), Name: RPCDollar[3].Ident}
		}
	case 32:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:601
		{
			RPCVAL.DispatchInterfaceBody = RPCDollar[1].DispatchInterfaceBody
		}
	case 33:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:605
		{
			if len(RPCDollar[2].DispatchInterfaceBody.Properties) > 0 {
				RPCVAL.DispatchInterfaceBody.Properties = append(RPCVAL.DispatchInterfaceBody.Properties, RPCDollar[2].DispatchInterfaceBody.Properties...)
			}
			if len(RPCDollar[2].DispatchInterfaceBody.Methods) > 0 {
				RPCVAL.DispatchInterfaceBody.Methods = append(RPCVAL.DispatchInterfaceBody.Methods, RPCDollar[2].DispatchInterfaceBody.Methods...)
			}
		}
	case 34:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:616
		{
			RPCVAL.DispatchInterfaceBody = DispatchInterfaceBody{Properties: RPCDollar[3].Fields}
		}
	case 35:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:620
		{
			RPCVAL.DispatchInterfaceBody = DispatchInterfaceBody{Methods: RPCDollar[3].Operations}
		}
	case 36:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:626
		{
			RPCVAL.Fields = nil
		}
	case 37:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:630
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 38:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:636
		{
			RPCVAL.Operations = []*Operation{RPCDollar[1].Operation}
		}
	case 39:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:640
		{
			RPCVAL.Operations = append(RPCVAL.Operations, RPCDollar[2].Operation)
		}
	case 40:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:646
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, Body: RPCDollar[3].InterfaceBody, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 41:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:650
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 42:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:654
		{
			RPCVAL.Interface = Interface{Name: RPCDollar[1].Interface.Name, Attrs: RPCDollar[1].Interface.Attrs, BaseName: RPCDollar[1].Interface.BaseName}
		}
	case 43:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:660
		{
			RPCVAL.Interface = Interface{Attrs: RPCDollar[1].Attr.Interface(), Name: RPCDollar[3].Ident, BaseName: RPCDollar[4].Ident}
		}
	case 44:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:666
		{
			RPCVAL.Ident = ""
		}
	case 45:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:670
		{
			RPCVAL.Ident = RPCDollar[2].Ident
		}
	case 46:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:676
		{
			RPCVAL.Attr = pAttr{}
		}
	case 47:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:680
		{
			RPCVAL.Attr = RPCDollar[1].Attr
		}
	case 48:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:686
		{
			RPCVAL.Attr = RPCDollar[2].Attr
		}
	case 49:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:690
		{
			RPCVAL.Attr = RPCVAL.Attr.Merge(RPCDollar[3].Attr)
		}
	case 50:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:696
		{
			RPCVAL.Attr = RPCVAL.Attr.Set(RPCDollar[1].AttrType)
		}
	case 51:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:700
		{
			RPCVAL.Attr = RPCVAL.Attr.Set(RPCDollar[3].AttrType)
		}
	case 52:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:707
		{
			RPCVAL.AttrType = pAttrType{FIRST_IS, pAttr{FirstIs: RPCDollar[3].Exprs}}
		}
	case 53:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:711
		{
			RPCVAL.AttrType = pAttrType{LAST_IS, pAttr{LastIs: RPCDollar[3].Exprs}}
		}
	case 54:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:715
		{
			RPCVAL.AttrType = pAttrType{LENGTH_IS, pAttr{LengthIs: RPCDollar[3].Exprs}}
		}
	case 55:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:719
		{
			RPCVAL.AttrType = pAttrType{MIN_IS, pAttr{MinIs: RPCDollar[3].Exprs}}
		}
	case 56:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:723
		{
			RPCVAL.AttrType = pAttrType{MAX_IS, pAttr{MaxIs: RPCDollar[3].Exprs}}
		}
	case 57:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:727
		{
			RPCVAL.AttrType = pAttrType{SIZE_IS, pAttr{SizeIs: RPCDollar[3].Exprs}}
		}
	case 58:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:731
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[1].Token, pAttr{}}
		}
	case 59:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:735
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[1].Token, pAttr{}}
		}
	case 60:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:739
		{
			RPCVAL.AttrType = pAttrType{RPCDollar[3].Token, pAttr{}}
		}
	case 61:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:743
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 62:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:747
		{
			RPCVAL.AttrType = pAttrType{IGNORE, pAttr{}}
		}
	case 63:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:751
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 64:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:755
		{
			RPCVAL.AttrType = pAttrType{TRANSMIT_AS, pAttr{TransmitAs: RPCDollar[3].Type}}
		}
	case 65:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:759
		{
			RPCVAL.AttrType = pAttrType{SWITCH_TYPE, pAttr{SwitchType: RPCDollar[1].Type}}
		}
	case 66:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:763
		{
			RPCVAL.AttrType = pAttrType{HANDLE, pAttr{}}
		}
	case 67:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:767
		{
			RPCVAL.AttrType = pAttrType{IDEMPOTENT, pAttr{}}
		}
	case 68:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:771
		{
			RPCVAL.AttrType = pAttrType{BROADCAST, pAttr{}}
		}
	case 69:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:775
		{
			RPCVAL.AttrType = pAttrType{MAYBE, pAttr{}}
		}
	case 70:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:779
		{
			RPCVAL.AttrType = pAttrType{REFLECT_DELETIONS, pAttr{}}
		}
	case 71:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:783
		{
			RPCVAL.AttrType = pAttrType{UUID, pAttr{UUID: RPCDollar[1].UUID}}
		}
	case 72:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:787
		{
			RPCVAL.AttrType = pAttrType{VERSION, pAttr{Version: RPCDollar[3].Version}}
		}
	case 73:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:791
		{
			RPCVAL.AttrType = pAttrType{ENDPOINT, pAttr{Endpoints: RPCDollar[3].Strings}}
		}
	case 74:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:795
		{
			RPCVAL.AttrType = pAttrType{EXCEPTIONS, pAttr{Exceptions: RPCDollar[3].Strings}}
		}
	case 75:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:799
		{
			RPCVAL.AttrType = pAttrType{LOCAL, pAttr{}}
		}
	case 76:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:803
		{
			switch RPCDollar[3].Token {
			case POINTER_PTR:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypePtr}}
			case POINTER_REF:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypeRef}}
			case POINTER_UNIQUE:
				RPCVAL.AttrType = pAttrType{POINTER_DEFAULT, pAttr{PointerDefault: PointerTypeUnique}}
			}
		}
	case 77:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:814
		{
			RPCVAL.AttrType = pAttrType{V1_ENUM, pAttr{}}
		}
	case 78:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:818
		{
			RPCVAL.AttrType = pAttrType{MS_UNION, pAttr{}}
		}
	case 79:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:822
		{
			RPCVAL.AttrType = RPCDollar[1].AttrType
		}
	case 80:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:826
		{
			RPCVAL.AttrType = pAttrType{DISABLE_CONSISTENCY_CHECK, pAttr{}}
		}
	case 81:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:830
		{
			RPCVAL.AttrType = pAttrType{OBJECT, pAttr{}}
		}
	case 82:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:834
		{
			RPCVAL.AttrType = pAttrType{CALLBACK, pAttr{}}
		}
	case 83:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:838
		{
			RPCVAL.AttrType = pAttrType{RETVAL, pAttr{}}
		}
	case 84:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:842
		{
			RPCVAL.AttrType = pAttrType{IID_IS, pAttr{IIDIs: RPCDollar[3].Expr}}
		}
	case 85:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:846
		{
			RPCVAL.AttrType = pAttrType{HELP_STRING, pAttr{HelpString: RPCDollar[3].String}}
		}
	case 86:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:850
		{
			RPCVAL.AttrType = pAttrType{DUAL, pAttr{}}
		}
	case 87:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:854
		{
			RPCVAL.AttrType = pAttrType{PROPGET, pAttr{}}
		}
	case 88:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:858
		{
			RPCVAL.AttrType = pAttrType{PROPPUT, pAttr{}}
		}
	case 89:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:862
		{
			RPCVAL.AttrType = pAttrType{PROPPUTREF, pAttr{}}
		}
	case 90:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:866
		{
			val, ok := RPCDollar[3].Expr.Eval(RPClex.(ExprStore))
			if !ok {
				RPClex.Error("cannot eval ID expression")
				return 0
			}
			if _, ok = val.BigInt(); !ok {
				RPClex.Error("cannot eval ID expression")
				return 0
			}
			RPCVAL.AttrType = pAttrType{ID, pAttr{ID: val}}
		}
	case 91:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:879
		{
			RPCVAL.AttrType = pAttrType{HIDDEN, pAttr{}}
		}
	case 92:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:883
		{
			RPCVAL.AttrType = pAttrType{NONEXTENSIBLE, pAttr{}}
		}
	case 93:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:887
		{
			RPCVAL.AttrType = pAttrType{RESTRICTED, pAttr{}}
		}
	case 94:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:891
		{
			exp, ok := RPCDollar[3].Expr.Eval(RPClex.(ExprStore))
			if !ok {
				RPClex.Error("cannot evaluate default value")
				return 0
			}
			RPCVAL.AttrType = pAttrType{DEFAULT_VALUE, pAttr{DefaultValue: exp}}
		}
	case 95:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:900
		{
			RPCVAL.AttrType = pAttrType{ODL, pAttr{}}
		}
	case 96:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:904
		{
			RPCVAL.AttrType = pAttrType{OLEAUTOMATION, pAttr{}}
		}
	case 97:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:908
		{
			RPCVAL.AttrType = pAttrType{OPTIONAL, pAttr{}}
		}
	case 98:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:912
		{
			RPCVAL.AttrType = pAttrType{APPOBJECT, pAttr{}}
		}
	case 99:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:916
		{
			RPCVAL.AttrType = pAttrType{ANNOTATION, pAttr{Annotation: RPCDollar[3].String}}
		}
	case 100:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:920
		{
			RPCVAL.AttrType = pAttrType{CALL_AS, pAttr{CallAs: RPCDollar[3].Ident}}
		}
	case 101:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:924
		{
			RPCVAL.AttrType = pAttrType{WIRE_MARSHAL, pAttr{WireMarshal: RPCDollar[3].Ident}}
		}
	case 102:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:928
		{
			RPCVAL.AttrType = pAttrType{PUBLIC, pAttr{}}
		}
	case 103:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:932
		{
			RPCVAL.AttrType = pAttrType{SAFEARRAY, pAttr{Safearray: RPCDollar[3].Type}}
		}
	case 104:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:936
		{
			RPCVAL.AttrType = pAttrType{PAD, pAttr{Pad: RPCDollar[3].Int.Uint64()}}
		}
	case 105:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:940
		{
			RPCVAL.AttrType = pAttrType{GOEXT_LAYOUT, pAttr{Layout: RPCDollar[3].Fields}}
		}
	case 106:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:944
		{
			RPCVAL.AttrType = pAttrType{GOEXT_NO_SIZE_LIMIT, pAttr{NoSizeLimit: true}}
		}
	case 107:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:950
		{
			RPCVAL.Version = &Version{Major: uint16(RPCDollar[1].Int.Uint64())}
		}
	case 108:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:954
		{
			RPCVAL.Version = &Version{Major: uint16(RPCDollar[1].Int.Uint64()), Minor: uint16(RPCDollar[3].Int.Uint64())}
		}
	case 109:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:960
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 110:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:964
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 111:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:970
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 112:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:974
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 113:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:980
		{
			RPCVAL.String = RPCDollar[1].String
		}
	case 114:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:986
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 115:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:992
		{
			RPCVAL.InterfaceBody = InterfaceBody{Imports: RPCDollar[1].Strings, Export: RPCDollar[2].InterfaceBody.Export, Operations: RPCDollar[2].InterfaceBody.Operations}
			for i, o := range RPCVAL.InterfaceBody.Operations {
				o.OpNum = i
			}
		}
	case 116:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1001
		{
			RPCVAL.InterfaceBody = RPCDollar[1].InterfaceBody
			export := make([]*Export, len(RPCDollar[1].InterfaceBody.Export))
			for _, e := range RPCDollar[1].InterfaceBody.Export {
				export[e.Position] = e
			}
			for _, e := range export {
				exportSyms(RPClex, e.Name, e)
			}
		}
	case 117:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1012
		{
			if len(RPCDollar[2].InterfaceBody.Export) > 0 {
				if RPCVAL.InterfaceBody.Export == nil {
					RPCVAL.InterfaceBody.Export = make(map[string]*Export)
				}
				export := make([]*Export, len(RPCDollar[2].InterfaceBody.Export))
				for _, e := range RPCDollar[2].InterfaceBody.Export {
					export[e.Position] = e
				}
				for _, e := range export {
					RPCVAL.InterfaceBody.Export[e.Name] = e
					exportSyms(RPClex, e.Name, e)
				}
			}
			if len(RPCDollar[2].InterfaceBody.Operations) > 0 {
				RPCVAL.InterfaceBody.Operations = append(RPCVAL.InterfaceBody.Operations, RPCDollar[2].InterfaceBody.Operations...)
			}
		}
	case 118:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1033
		{
			RPCVAL.Strings = []string{}
		}
	case 119:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1037
		{
			RPCVAL.Strings = RPCDollar[1].Strings
		}
	case 120:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1043
		{
			RPCVAL.Strings = RPCDollar[2].Strings
			// XXX: load import files.
			for _, f := range RPCDollar[2].Strings {
				if _, err := NewFile(f, "").Load(); err != nil {
					RPClex.Error("unable to load file: " + err.Error())
					return 0
				}
			}
		}
	case 121:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1055
		{
			RPCVAL.InterfaceBody = InterfaceBody{Export: make(map[string]*Export)}
			for _, e := range RPCDollar[1].Export {
				RPCVAL.InterfaceBody.Export[e.Name], e.Position = e, len(RPCVAL.InterfaceBody.Export)

			}
		}
	case 122:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1063
		{
			RPCVAL.InterfaceBody = InterfaceBody{Operations: []*Operation{RPCDollar[1].Operation}}
		}
	case 123:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1069
		{
			RPCVAL.Export = RPCDollar[1].Typedef.pToExport_()
		}
	case 124:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1073
		{
			RPCVAL.Export = []*Export{&Export{Name: RPCDollar[1].Const.Name, Const: RPCDollar[1].Const}}
		}
	case 125:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1077
		{
			RPCVAL.Export = RPCDollar[1].Export
		}
	case 126:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1081
		{
			RPCVAL.Export = []*Export{&Export{Name: RPCDollar[1].Type.TypeName(), Type: RPCDollar[1].Type}}
		}
	case 127:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1087
		{
			RPCVAL.Strings = []string{RPCDollar[1].String}
		}
	case 128:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1091
		{
			RPCVAL.Strings = append(RPCVAL.Strings, RPCDollar[3].String)
		}
	case 129:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1097
		{
			RPCVAL.String = RPCDollar[1].String
		}
	case 130:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1103
		{
			exp, err := RPCDollar[5].Expr.Coerce(RPCDollar[2].Kind)
			if err != nil {
				RPClex.Error(err.Error())
				return 0
			}
			RPCVAL.Const = &Const{Type: RPCDollar[2].Kind, Name: RPCDollar[3].Ident, Value: exp}
		}
	case 131:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1114
		{
			switch v := RPCDollar[3].Expr.Value.(type) {
			case *big.Int:
				RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Const: &Const{Type: TypeInt64, Name: RPCDollar[2].Ident, Value: RPCDollar[3].Expr}}}
			case string:
				if RPCDollar[3].Expr.CanEval() {
					RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Const: &Const{Type: TypeString, Name: RPCDollar[2].Ident, Value: RPCDollar[3].Expr}}}
					break
				}
				ref := &Type{Kind: TypeRef, Name: v}
				decl := &Type{Kind: TypeAttribute, Attrs: &TypeAttr{Alias: RPCDollar[2].Ident}}
				typ, ok := lookupType(RPClex, ref.Name)
				if !ok {
					// XXX: defer type resolution.
					decl.Elem = pushRef(RPClex, ref)
				} else {
					decl.Elem = typ
				}

				RPCVAL.Export = []*Export{&Export{Name: RPCDollar[2].Ident, Type: decl}}

				// FIXME: dnsp.idl PRAGMA Types.
				// $$ = []*Export{&Export{Name: $2, Type: &Type{Kind: TypeRef, Name: v}}}
			default:
				RPClex.Error("invalid #define statement")
				return 0
			}
		}
	case 132:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:1143
		{
			// XXX: re-enter the STRING_LITERAL as PRAGMA_DEFINE.
			pushLex(RPClex, RPCDollar[3].String)
		}
	case 133:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1150
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 134:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1154
		{
			typ, ok := lookupType(RPClex, RPCDollar[1].Ident)
			if !ok {
				RPClex.Error("cannot lookup type " + RPCDollar[1].Ident)
				return 0
			}

			switch typ = typ.Base(); typ.Kind {
			case TypeChar,
				TypeUChar,
				TypeWChar,
				TypeBoolean,
				TypeInt8,
				TypeUint8,
				TypeInt16,
				TypeUint16,
				TypeInt32,
				TypeUint32,
				TypeInt32_64,
				TypeUint32_64,
				TypeInt64,
				TypeUint64,
				TypeVoid,
				TypeString,
				// FIXME: float, double not expected but used.
				TypeFloat32,
				TypeFloat64:
				RPCVAL.Kind = typ.Kind
			default:
				RPClex.Error("invalid const type " + RPCDollar[1].Ident)
				return 0
			}
		}
	case 135:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1188
		{
			RPCVAL.Kind = TypeChar
		}
	case 136:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1192
		{
			RPCVAL.Kind = TypeUChar
		}
	case 137:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1196
		{
			RPCVAL.Kind = TypeBoolean
		}
	case 138:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1200
		{
			RPCVAL.Kind = TypeVoid
		}
	case 139:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1204
		{
			RPCVAL.Kind = TypeString
		}
	case 140:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1210
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 141:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1214
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].String)
		}
	case 142:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1218
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].Char)
		}
	case 143:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1222
		{
			RPCVAL.Expr = NewValue(nil)
		}
	case 144:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1226
		{
			RPCVAL.Expr = NewValue(true)
		}
	case 145:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1230
		{
			RPCVAL.Expr = NewValue(false)
		}
	case 146:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1236
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 147:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1242
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 148:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1246
		{
			exp, ok := RPCDollar[1].Expr.Ter(RPCDollar[3].Expr, RPCDollar[5].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ternary expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 149:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1257
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 150:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1261
		{
			exp, ok := RPCDollar[1].Expr.LogicalOr(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate l-or expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 151:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1272
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 152:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1276
		{
			exp, ok := RPCDollar[1].Expr.LogicalAnd(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate l-and expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 153:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1287
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 154:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1291
		{
			exp, ok := RPCDollar[1].Expr.Or(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate or expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 155:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1302
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 156:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1306
		{
			exp, ok := RPCDollar[1].Expr.Xor(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate xor expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 157:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1317
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 158:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1321
		{
			exp, ok := RPCDollar[1].Expr.And(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate and expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 159:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1332
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 160:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1336
		{
			exp, ok := RPCDollar[1].Expr.Eq(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate eq expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 161:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1345
		{
			exp, ok := RPCDollar[1].Expr.Ne(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ne expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 162:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1356
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 163:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1360
		{
			exp, ok := RPCDollar[1].Expr.Lt(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate lt expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 164:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1369
		{
			exp, ok := RPCDollar[1].Expr.Gt(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate gt expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 165:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1378
		{
			exp, ok := RPCDollar[1].Expr.Le(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate le expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 166:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1387
		{
			exp, ok := RPCDollar[1].Expr.Ge(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate ge expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 167:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1398
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 168:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1402
		{
			exp, ok := RPCDollar[1].Expr.Lsh(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate lsh expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 169:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1411
		{
			exp, ok := RPCDollar[1].Expr.Rsh(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate rsh expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 170:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1422
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 171:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1426
		{
			exp, ok := RPCDollar[1].Expr.Sub(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate sub expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 172:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1435
		{
			exp, ok := RPCDollar[1].Expr.Add(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate add expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 173:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1446
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 174:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1450
		{
			exp, ok := RPCDollar[1].Expr.Mul(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate mul expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 175:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1459
		{
			exp, ok := RPCDollar[1].Expr.Div(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate div expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 176:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1468
		{
			exp, ok := RPCDollar[1].Expr.Rem(RPCDollar[3].Expr)
			if !ok {
				RPClex.Error("cannot evaluate rem expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 177:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1479
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 178:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1483
		{
			exp, ok := RPCDollar[2].Expr.Positive()
			if !ok {
				RPClex.Error("cannot evaluate u'+' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 179:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1492
		{
			exp, ok := RPCDollar[2].Expr.Negative()
			if !ok {
				RPClex.Error("cannot evaluate u'-' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 180:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1501
		{
			exp, ok := RPCDollar[2].Expr.Neg()
			if !ok {
				RPClex.Error("cannot evaluate u'~' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 181:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1510
		{
			exp, ok := RPCDollar[2].Expr.Not()
			if !ok {
				RPClex.Error("cannot evaluate u'!' expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 182:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1521
		{
			RPCVAL.Expr = NewValue(RPCDollar[1].Int)
		}
	case 183:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:1525
		{
			sz := TypeSize(RPClex.(TypeStore), RPCDollar[3].Type)
			if sz == 0 {
				RPClex.Error(fmt.Sprintf("cannot determine size of type: %s (%s)", RPCDollar[3].Type.Name, RPCDollar[3].Type.Kind))
				return 0
			}
			RPCVAL.Expr = NewValue(big.NewInt(int64(sz)))
		}
	case 184:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1534
		{
			if c, ok := lookupConst(RPClex, RPCDollar[1].Ident); !ok {
				RPCVAL.Expr = NewIdent(RPCDollar[1].Ident)
			} else {
				RPCVAL.Expr = c.Value
			}
		}
	case 185:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1542
		{
			exp, ok := NewIdent(RPCDollar[2].Ident).Ptr()
			if !ok {
				RPClex.Error("cannot evaluate ptr expression")
				return 0
			}
			RPCVAL.Expr = exp
		}
	case 186:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1551
		{
			RPCVAL.Expr = RPCDollar[2].Expr
		}
	case 187:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:1557
		{
			attrs := RPCDollar[1].Attr.Merge(RPCDollar[3].Attr).Type()
			if attrs.Usage.ContextHandle {
				ref := &Type{Kind: TypeRef, Name: "ndr_context_handle"}
				typ, ok := lookupType(RPClex, ref.Name)
				if !ok {
					// XXX: defer type resolution.
					RPClex.Error("ndr_context_handle not found")
					break
				}
				RPCDollar[4].Type = typ
			}

			RPCVAL.Typedef = &pTypedef{Type: RPCDollar[4].Type, Attrs: attrs, Declarators: RPCDollar[5].Declarators}
		}
	case 188:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1575
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 189:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1579
		{
			RPCVAL.Type = RPCDollar[2].Type
		}
	case 190:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1583
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 191:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1587
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 192:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1593
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 193:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1597
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 194:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1601
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 195:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1607
		{
			ref := &Type{Kind: TypeRef, Name: RPCDollar[1].Ident}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 196:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1621
		{
			RPCVAL.Declarators = pDeclarators{RPCDollar[1].Declarator}
		}
	case 197:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1625
		{
			RPCVAL.Declarators = append(RPCVAL.Declarators, RPCDollar[3].Declarator)
		}
	case 198:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1630
		{
			RPCVAL.Declarators = pDeclarators{&pDeclarator{Name: ""}}
		}
	case 199:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1636
		{
			RPCVAL.Declarator = RPCDollar[2].Declarator
			for i := 0; i < int(RPCDollar[1].Int64); i++ {
				RPCVAL.Declarator = &pDeclarator{Name: RPCVAL.Declarator.Name, Type: &Type{Kind: TypePointer, Elem: RPCVAL.Declarator.Type}}
			}
		}
	case 200:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1645
		{
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].String}
		}
	case 201:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1649
		{
			RPCVAL.Declarator = RPCDollar[2].Declarator
		}
	case 202:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1653
		{
			RPCVAL.Declarator = RPCDollar[1].Declarator
		}
	case 203:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1657
		{
			RPCVAL.Declarator = RPCDollar[1].Declarator
		}
	case 204:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1663
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 205:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1667
		{
			ident, ok := tokName(RPClex, RPCrcvr.char)
			if !ok {
				return 0
			}
			RPCVAL.String = ident
		}
	case 206:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1677
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 207:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1681
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 208:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1686
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 209:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1700
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 210:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1704
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 211:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1708
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 212:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1712
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 213:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1716
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 214:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1720
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 215:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1724
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 216:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1729
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 217:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1736
		{
			RPCVAL.Kind = TypeFloat32
		}
	case 218:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1740
		{
			RPCVAL.Kind = TypeFloat64
		}
	case 219:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1746
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 220:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1750
		{
			switch RPCDollar[2].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint64
			default:
				RPCVAL.Kind = TypeInt64
			}
		}
	case 221:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1759
		{
			RPCVAL.Kind = TypeUint64
		}
	case 222:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1765
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 223:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1769
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 224:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1773
		{
			RPCVAL.Kind = RPCDollar[1].Kind
		}
	case 225:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1779
		{
			switch RPCDollar[2].Token {
			case LONG:
				RPCVAL.Kind = TypeInt32
			case SHORT:
				RPCVAL.Kind = TypeInt16
			case SMALL:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 226:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1790
		{
			switch RPCDollar[1].Token {
			case LONG:
				RPCVAL.Kind = TypeInt32
			case SHORT:
				RPCVAL.Kind = TypeInt16
			case SMALL:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 227:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1803
		{
			switch RPCDollar[1].Token {
			case LONG:
				RPCVAL.Kind = TypeUint32
			case SHORT:
				RPCVAL.Kind = TypeUint16
			case SMALL:
				RPCVAL.Kind = TypeUint8
			}
		}
	case 228:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:1814
		{
			switch RPCDollar[2].Token {
			case LONG:
				RPCVAL.Kind = TypeUint32
			case SHORT:
				RPCVAL.Kind = TypeUint16
			case SMALL:
				RPCVAL.Kind = TypeUint8
			}
		}
	case 229:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1828
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32
			default:
				RPCVAL.Kind = TypeInt32
			}
		}
	case 230:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1837
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint8
			default:
				RPCVAL.Kind = TypeInt8
			}
		}
	case 231:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1846
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint16
			default:
				RPCVAL.Kind = TypeInt16
			}
		}
	case 232:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1855
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32
			default:
				RPCVAL.Kind = TypeInt32
			}
		}
	case 233:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1864
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint32_64
			default:
				RPCVAL.Kind = TypeInt32_64
			}
		}
	case 234:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1873
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUint64
			default:
				RPCVAL.Kind = TypeInt64
			}
		}
	case 235:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1885
		{
			RPCVAL.Token = LONG
		}
	case 236:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1889
		{
			RPCVAL.Token = SHORT
		}
	case 237:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1893
		{
			RPCVAL.Token = SMALL
		}
	case 238:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1899
		{
			switch RPCDollar[1].Token {
			case UNSIGNED:
				RPCVAL.Kind = TypeUChar
			default:
				RPCVAL.Kind = TypeChar
			}
		}
	case 239:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1911
		{
			RPCVAL.Kind = TypeWChar
		}
	case 240:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1918
		{
			RPCVAL.Kind = TypeBoolean
		}
	case 241:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1924
		{
			RPCVAL.Kind = TypeUint8
		}
	case 242:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1930
		{
			RPCVAL.Kind = TypeVoid
		}
	case 243:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1936
		{
			RPCVAL.Kind = TypeHandle
		}
	case 244:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1942
		{
			RPCVAL.Token = 0
		}
	case 245:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1946
		{
			RPCVAL.Token = UNSIGNED
		}
	case 246:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:1952
		{
			RPCVAL.Token = 0
		}
	case 247:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1956
		{
			RPCVAL.Token = UNSIGNED
		}
	case 248:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1960
		{
			RPCVAL.Token = 0
		}
	case 253:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1975
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 254:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1979
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 255:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1983
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 256:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1987
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 257:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:1991
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 258:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:1997
		{
			ref := &Type{Kind: TypeRef, Name: "_struct_" + RPCDollar[2].String}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 259:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2008
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 260:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2014
		{
			for i := range RPCDollar[3].Fields {
				RPCDollar[3].Fields[i].Position = i + 1
			}
			// XXX: set proper switch type if not specified.
			SetSwitchType(RPCDollar[3].Fields)
			RPCVAL.Type = &Type{Kind: TypeStruct, Struct: &Struct{Fields: RPCDollar[3].Fields}}
		}
	case 261:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2025
		{
			for i := range RPCDollar[4].Fields {
				RPCDollar[4].Fields[i].Position = i + 1
			}
			// XXX: set proper switch type if not specified.
			SetSwitchType(RPCDollar[4].Fields)
			RPCVAL.Type = &Type{Kind: TypeStruct, Tag: RPCDollar[2].String, Struct: &Struct{Fields: RPCDollar[4].Fields}}
		}
	case 262:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2036
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 263:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2042
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 264:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2046
		{
			RPCVAL.Fields = append(RPCVAL.Fields, RPCDollar[2].Fields...)
		}
	case 265:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2052
		{
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 266:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2058
		{
			RPCVAL.Fields = make([]*Field, 0, len(RPCDollar[3].Declarators))
			for _, decl := range RPCDollar[3].Declarators {
				decl.Type = decl.Type.Append(RPCDollar[2].Type)
				RPCVAL.Fields = append(RPCVAL.Fields, &Field{Attrs: RPCDollar[1].Attr.Field(), Name: decl.Name, Type: decl.Type, DefaultValue: RPCDollar[4].Expr})
			}

		}
	case 267:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2069
		{
			RPCVAL.Expr = Expr{}
		}
	case 268:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2073
		{
			RPCVAL.Expr = RPCDollar[2].Expr
		}
	case 269:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2079
		{
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String}
		}
	case 270:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2083
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 271:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2089
		{
			pos := 1
			for i := range RPCDollar[5].UnionCases {
				for j := range RPCDollar[5].UnionCases[i].Arms {
					RPCDollar[5].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Name: RPCDollar[3].String, Union: &Union{Switch: RPCDollar[2].UnionSwitch, Body: RPCDollar[5].UnionCases}}
		}
	case 272:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2100
		{
			pos := 1
			for i := range RPCDollar[3].UnionCases {
				for j := range RPCDollar[3].UnionCases[i].Arms {
					RPCDollar[3].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Union: &Union{Body: RPCDollar[3].UnionCases}}
		}
	case 273:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2111
		{
			pos := 1
			for i := range RPCDollar[3].UnionCases {
				for j := range RPCDollar[3].UnionCases[i].Arms {
					RPCDollar[3].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeCUnion, Union: &Union{Body: RPCDollar[3].UnionCases}}
		}
	case 274:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2124
		{
			RPCVAL.UnionSwitch = &UnionSwitch{Type: RPCDollar[3].Type, Name: RPCDollar[4].Ident}
		}
	case 275:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2130
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 276:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2134
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 277:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2138
		{
			RPCVAL.Type = &Type{Kind: RPCDollar[1].Kind}
		}
	case 278:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2142
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 279:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2147
		{
			ref := &Type{Kind: TypeRef, Name: "_enum_" + RPCDollar[2].String}
			typ, ok := lookupType(RPClex, ref.Name)
			if !ok {
				// XXX: defer type resolution.
				RPCVAL.Type = pushRef(RPClex, ref)
			} else {
				RPCVAL.Type = typ
			}
		}
	case 280:
		RPCDollar = RPCS[RPCpt-7 : RPCpt+1]
//line midl/parse.y:2160
		{
			pos := 1
			for i := range RPCDollar[6].UnionCases {
				for j := range RPCDollar[6].UnionCases[i].Arms {
					RPCDollar[6].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String, Union: &Union{Switch: RPCDollar[3].UnionSwitch, Body: RPCDollar[6].UnionCases}}
		}
	case 281:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2171
		{
			pos := 1
			for i := range RPCDollar[4].UnionCases {
				for j := range RPCDollar[4].UnionCases[i].Arms {
					RPCDollar[4].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeUnion, Tag: RPCDollar[2].String, Union: &Union{Body: RPCDollar[4].UnionCases}}
		}
	case 282:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2182
		{
			pos := 1
			for i := range RPCDollar[4].UnionCases {
				for j := range RPCDollar[4].UnionCases[i].Arms {
					RPCDollar[4].UnionCases[i].Arms[j].Position = pos
					pos++
				}
			}
			RPCVAL.Type = &Type{Kind: TypeCUnion, Tag: RPCDollar[2].String, Union: &Union{Body: RPCDollar[4].UnionCases}}
		}
	case 283:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2195
		{
			// In encapsulated unions, if the <union_name> is
			// omitted, the union is assigned the name tagged_union
			// in the generated header source.
			RPCVAL.String = "tagged_union"
		}
	case 284:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2202
		{
			RPCVAL.String = RPCDollar[1].Ident
		}
	case 285:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2208
		{
			RPCVAL.UnionCases = []*UnionCase{RPCDollar[1].UnionCase}
		}
	case 286:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2212
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, RPCDollar[2].UnionCase)
		}
	case 287:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2218
		{
			RPCVAL.UnionCases = []*UnionCase{&UnionCase{Arms: RPCDollar[1].Fields}}
		}
	case 288:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2222
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, &UnionCase{Arms: RPCDollar[2].Fields})
		}
	case 289:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2228
		{
			RPCVAL.UnionCases = []*UnionCase{RPCDollar[1].UnionCase}
		}
	case 290:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2232
		{
			RPCVAL.UnionCases = append(RPCVAL.UnionCases, RPCDollar[2].UnionCase)
		}
	case 291:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2238
		{
			labels := make([]interface{}, 0, len(RPCDollar[1].Exprs))
			for _, label := range RPCDollar[1].Exprs {
				labels = append(labels, label)
			}
			RPCVAL.UnionCase = &UnionCase{Labels: labels, Arms: RPCDollar[2].Fields}
		}
	case 292:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2246
		{
			RPCVAL.UnionCase = &UnionCase{Arms: RPCDollar[1].Fields, IsDefault: true}
		}
	case 293:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2252
		{
			RPCVAL.Exprs = RPCDollar[1].Exprs
		}
	case 294:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2256
		{
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[2].Exprs...)
		}
	case 295:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2262
		{
			labels := make([]interface{}, 0, len(RPCDollar[1].Exprs))
			for _, label := range RPCDollar[1].Exprs {
				labels = append(labels, label)
			}
			RPCVAL.UnionCase = &UnionCase{Labels: labels, Arms: RPCDollar[2].Fields}
		}
	case 296:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2270
		{
			RPCVAL.UnionCase = &UnionCase{Labels: nil, Arms: RPCDollar[1].Fields, IsDefault: true}
		}
	case 297:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2276
		{
			RPCVAL.Exprs = Exprs{RPCDollar[2].Expr}
		}
	case 298:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2282
		{
			RPCVAL.Exprs = RPCDollar[4].Exprs
		}
	case 299:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2288
		{
			RPCVAL.Exprs = Exprs{RPCDollar[1].Expr}
		}
	case 300:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2292
		{
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[3].Expr)
		}
	case 301:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2299
		{
			RPCVAL.Fields = RPCDollar[3].Fields
		}
	case 302:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2305
		{
			RPCVAL.Fields = RPCDollar[4].Fields
		}
	case 303:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2311
		{
			RPCVAL.Fields = nil
		}
	case 304:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2315
		{
			for i := range RPCDollar[1].Fields {
				RPCDollar[1].Fields[i].Position = i + 1
			}
			RPCVAL.Fields = RPCDollar[1].Fields
		}
	case 305:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2324
		{
			RPCVAL.Type = RPCDollar[3].Type
		}
	case 306:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2330
		{
			RPCVAL.AttrType = pAttrType{SWITCH_IS, pAttr{SwitchIs: RPCDollar[3].Expr}}
		}
	case 307:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2336
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Enum: &Enum{Elems: make([]*Element, 0, len(RPCDollar[3].TagIDs))}}
			for idx, i := 0, 0; i < len(RPCDollar[3].TagIDs); i, idx = i+1, idx+1 {
				tag, exp := RPCDollar[3].TagIDs[i].Tag, RPCDollar[3].TagIDs[i].ID
				if !exp.Empty() {
					val, ok := exp.Eval(RPClex.(ExprStore))
					if !ok {
						RPClex.Error("cannot evaluate tag-id expression")
						return 0
					}
					bi, ok := val.BigInt()
					if !ok {
						RPClex.Error("enum: not an integer type")
						return 0
					}
					idx, exp = int(bi.Uint64()), val
				} else {
					exp = NewValue(big.NewInt(int64(idx)))
				}
				if uint32(uint16(idx)) != uint32(idx) {
					RPCVAL.Type.Enum.Is32 = true
				}
				RPCVAL.Type.Enum.Elems = append(RPCVAL.Type.Enum.Elems, &Element{tag, idx})
				storeConst(RPClex, tag, exp)
			}
		}
	case 308:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2366
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Tag: RPCDollar[2].String}
		}
	case 309:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2370
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 310:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2376
		{
			RPCVAL.Type = &Type{Kind: TypeEnum, Tag: RPCDollar[2].String, Enum: &Enum{Elems: make([]*Element, 0, len(RPCDollar[4].TagIDs))}}
			for idx, i := 0, 0; i < len(RPCDollar[4].TagIDs); i, idx = i+1, idx+1 {
				tag, exp := RPCDollar[4].TagIDs[i].Tag, RPCDollar[4].TagIDs[i].ID
				if !exp.Empty() {
					val, ok := exp.Eval(RPClex.(ExprStore))
					if !ok {
						RPClex.Error("cannot evaluate tag-id expression")
						return 0
					}
					bi, ok := val.BigInt()
					if !ok {
						RPClex.Error("enum: not an integer type")
						return 0
					}
					idx, exp = int(bi.Uint64()), val
				} else {
					exp = NewValue(big.NewInt(int64(idx)))
				}
				if uint32(uint16(idx)) != uint32(idx) {
					RPCVAL.Type.Enum.Is32 = true
				}
				RPCVAL.Type.Enum.Elems = append(RPCVAL.Type.Enum.Elems, &Element{tag, idx})
				storeConst(RPClex, tag, exp)
			}
		}
	case 311:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2406
		{
			RPCVAL.TagIDs = pTagIDs{RPCDollar[1].TagID}
		}
	case 312:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2410
		{
			RPCVAL.TagIDs = append(RPCVAL.TagIDs, RPCDollar[3].TagID)
		}
	case 315:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2420
		{
			RPCVAL.TagID = pTagID{Tag: RPCDollar[1].Ident}
		}
	case 316:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2425
		{
			RPCVAL.TagID = pTagID{Tag: RPCDollar[1].Ident, ID: RPCDollar[3].Expr}
		}
	case 317:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2432
		{
			RPCVAL.Type = &Type{Kind: TypePipe, Elem: RPCDollar[2].Type}
		}
	case 318:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2438
		{

			// XXX: array associativity is different from pointer.
			// so we need to find last array in the chain and insert
			// new array right after it (as it's element).

			array := &Type{Kind: TypeArray, Array: &Array{Bound: RPCDollar[3].ArrayBound}, Elem: RPCDollar[1].Declarator.Type}
			if RPCDollar[1].Declarator.Type == nil || RPCDollar[1].Declarator.Type.Kind != TypeArray {
				RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: array}
				break
			}

			last := RPCDollar[1].Declarator.Type
			// shift to the last array in the element chain.
			for last.Elem != nil && last.Elem.Kind == TypeArray {
				last = last.Elem
			}

			// insert array after last array and acuqire
			// the last array's element.
			array.Elem, last.Elem = last.Elem, array
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: RPCDollar[1].Declarator.Type}
		}
	case 319:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2464
		{
			RPCVAL.ArrayBound = ArrayBound{Lower: 0, Upper: -1}
		}
	case 320:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2468
		{
			if RPCDollar[1].Int.Int64() == -1 {
				RPCVAL.ArrayBound = ArrayBound{Lower: -1, Upper: 0}
			} else {
				RPCVAL.ArrayBound = ArrayBound{Lower: 0, Upper: RPCDollar[1].Int.Int64() - 1}
			}

		}
	case 321:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2477
		{
			RPCVAL.ArrayBound = RPCDollar[1].ArrayBound
		}
	case 322:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2483
		{
			RPCVAL.ArrayBound = ArrayBound{Lower: RPCDollar[1].Int.Int64(), Upper: RPCDollar[3].Int.Int64()}
		}
	case 323:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2489
		{
			RPCVAL.Int = big.NewInt(-1)
		}
	case 324:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2493
		{
			if !RPCDollar[1].Expr.CanEval() {
				RPClex.Error("cannot evaluate integer bound")
				return 0
			}
			val, ok := RPCDollar[1].Expr.BigInt()
			if !ok {
				RPClex.Error("cannot use non-integer as a bound declarator")
				return 0
			}
			RPCVAL.Int = val
		}
	case 325:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2508
		{
			RPCVAL.Token = USAGE_STRING
		}
	case 326:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2512
		{
			RPCVAL.Token = USAGE_CONTEXT_HANDLE
		}
	case 327:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2518
		{
			RPCVAL.Token = FORMAT_UTF8
		}
	case 328:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2522
		{
			RPCVAL.Token = FORMAT_NULL_TERMINATED
		}
	case 329:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2526
		{
			RPCVAL.Token = FORMAT_MULTI_SIZE
		}
	case 330:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2530
		{
			RPCVAL.Token = FORMAT_RUNE
		}
	case 331:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2536
		{
			RPCVAL.Type = RPCDollar[1].Type
		}
	case 332:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2542
		{
			RPCVAL.AttrType = pAttrType{RANGE, pAttr{Range: RPCDollar[2].Range}}
		}
	case 333:
		RPCDollar = RPCS[RPCpt-5 : RPCpt+1]
//line midl/parse.y:2548
		{
			if !CanEval(RPCDollar[2].Expr, RPCDollar[4].Expr) {
				RPClex.Error("cannot evaluate range declaration")
				return 0
			}
			min, ok := RPCDollar[2].Expr.BigInt()
			if !ok {
				RPClex.Error("invalid min value for range declarator")
				return 0
			}
			max, ok := RPCDollar[4].Expr.BigInt()
			if !ok {
				RPClex.Error("invalid max value for range declarator")
				return 0
			}
			RPCVAL.Range = &Range{Min: min.Int64(), Max: max.Int64()}
		}
	case 334:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2569
		{
			RPCVAL.Exprs = []Expr{RPCDollar[1].Expr}
		}
	case 335:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2573
		{
			// see https://learn.microsoft.com/en-us/windows/win32/rpc/multiple-levels-of-pointers
			// for (,Size) constructions.
			RPCVAL.Exprs = append(RPCVAL.Exprs, RPCDollar[3].Expr)
		}
	case 336:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2581
		{
			RPCVAL.Expr = Expr{}
		}
	case 337:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2585
		{
			RPCVAL.Expr = RPCDollar[1].Expr
		}
	case 338:
		RPCDollar = RPCS[RPCpt-0 : RPCpt+1]
//line midl/parse.y:2591
		{
			RPCVAL.Int64 = 0
		}
	case 339:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2595
		{
			RPCVAL.Int64 = RPCDollar[1].Int64
		}
	case 340:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2601
		{
			RPCVAL.Int64++
		}
	case 341:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2605
		{
			RPCVAL.Int64++
		}
	case 342:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2615
		{
			RPCVAL.Token = POINTER_REF
		}
	case 343:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2619
		{
			RPCVAL.Token = POINTER_UNIQUE
		}
	case 344:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2623
		{
			RPCVAL.Token = POINTER_PTR
		}
	case 345:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2629
		{
			for i := range RPCDollar[5].Params {
				if RPCDollar[5].Params[i].Name == "" {
					RPCDollar[5].Params[i].Name = fmt.Sprintf("Param%d", i)
				}
				if RPCDollar[5].Params[i].Type.Is(TypePointer) && RPCDollar[5].Params[i].Attrs.Pointer == PointerTypeNone {
					RPCDollar[5].Params[i].Attrs.Pointer = PointerTypeRefWeak
				}
			}
			RPCVAL.Operation = &Operation{Attrs: RPCDollar[1].Attr.Operation(), Type: RPCDollar[2].Type, Name: RPCDollar[3].Ident, Params: RPCDollar[5].Params}
		}
	case 346:
		RPCDollar = RPCS[RPCpt-6 : RPCpt+1]
//line midl/parse.y:2641
		{
			RPCVAL.Operation = &Operation{Attrs: RPCDollar[1].Attr.Operation(), Type: RPCDollar[2].Type, Name: RPCDollar[3].Ident}
		}
	case 347:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2647
		{
			RPCVAL.Params = append(RPCVAL.Params, RPCDollar[3].Param)
		}
	case 348:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2651
		{
			RPCVAL.Params = []*Param{RPCDollar[1].Param}
		}
	case 349:
		RPCDollar = RPCS[RPCpt-3 : RPCpt+1]
//line midl/parse.y:2657
		{
			RPCDollar[3].Declarator.Type = RPCDollar[3].Declarator.Type.Append(RPCDollar[2].Type)
			RPCVAL.Param = &Param{Attrs: RPCDollar[1].Attr.Param(), Name: RPCDollar[3].Declarator.Name, Type: RPCDollar[3].Declarator.Type}
			if RPCVAL.Param.Attrs.Usage.ContextHandle && !RPCDollar[3].Declarator.Type.Base().Is(TypeStruct) {
				ref := &Type{Kind: TypeRef, Name: "ndr_context_handle"}
				if typ, ok := lookupType(RPClex, ref.Name); !ok {
					// XXX: defer type resolution.
					RPCVAL.Param.Type = RPCVAL.Param.Type.AppendAfterPointer(pushRef(RPClex, ref))
				} else {
					RPCVAL.Param.Type = RPCVAL.Param.Type.AppendAfterPointer(typ)
				}
			}
		}
	case 350:
		RPCDollar = RPCS[RPCpt-2 : RPCpt+1]
//line midl/parse.y:2671
		{
			RPCDollar[2].Declarator.Type = RPCDollar[2].Declarator.Type.Append(RPCDollar[1].Type)
			attrs := pAttr{Direction: Direction{In: true}}
			RPCVAL.Param = &Param{Attrs: attrs.Param(), Name: RPCDollar[2].Declarator.Name, Type: RPCDollar[2].Declarator.Type}
		}
	case 351:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2679
		{
			RPCVAL.AttrType = pAttrType{IN, pAttr{}}
		}
	case 352:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2683
		{
			RPCVAL.AttrType = pAttrType{OUT, pAttr{}}
		}
	case 353:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2689
		{
			for i := range RPCDollar[3].Params {
				if RPCDollar[3].Params[i].Name == "" {
					RPCDollar[3].Params[i].Name = fmt.Sprintf("Param%d", i)
				}
			}
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: &Type{Kind: TypeFunc, Func: &Func{Params: RPCDollar[3].Params}, Elem: RPCDollar[1].Declarator.Type}}
		}
	case 354:
		RPCDollar = RPCS[RPCpt-4 : RPCpt+1]
//line midl/parse.y:2698
		{
			RPCVAL.Declarator = &pDeclarator{Name: RPCDollar[1].Declarator.Name, Type: &Type{Kind: TypeFunc, Func: &Func{}, Elem: RPCDollar[1].Declarator.Type}}
		}
	case 355:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2709
		{
			RPCVAL.Type = &Type{Kind: TypeError}
		}
	case 356:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2713
		{
			RPCVAL.Type = &Type{Kind: TypeCharset}

			switch RPCDollar[1].Token {
			case ISO_LATIN_1:
				RPCVAL.Type.Charset = CharsetISO_Latin_1
			case ISO_MULTILINGUAL:
				RPCVAL.Type.Charset = CharsetISO_Multilingual
			case ISO_UCS:
				RPCVAL.Type.Charset = CharsetISO_UCS
			}
		}
	case 357:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2728
		{
			RPCVAL.Token = ISO_LATIN_1
		}
	case 358:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2732
		{
			RPCVAL.Token = ISO_MULTILINGUAL
		}
	case 359:
		RPCDollar = RPCS[RPCpt-1 : RPCpt+1]
//line midl/parse.y:2736
		{
			RPCVAL.Token = ISO_UCS
		}
	}
	goto RPCstack /* stack new state and value */
}
